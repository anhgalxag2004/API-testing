{
	"info": {
		"_postman_id": "b7a1dc31-3a28-4ea4-a401-6b15cf4b8b72",
		"name": "Toolshop-API-Collection",
		"description": "Collection for Toolshop Sprint5 (with bugs) API testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "47807020"
	},
	"item": [
		{
			"name": "GET /products/search",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Lấy status code",
							"pm.test(\"Status code is valid\", function () {",
							"    pm.expect([200, 404, 405]).to.include(pm.response.code);",
							"});",
							"",
							"// Nếu 200: kiểm tra có trường \"data\"",
							"if (pm.response.code === 200) {",
							"    pm.test(\"Response message for 200\", function () {",
							"        const res = pm.response.json();",
							"        pm.expect(res).to.have.property(\"data\");",
							"        pm.expect(res.data).to.be.an(\"array\");",
							"    });",
							"}",
							"",
							"// Nếu 404: kiểm tra message",
							"if (pm.response.code === 404) {",
							"    pm.test(\"Response message for 404\", function () {",
							"        const res = pm.response.json();",
							"        pm.expect(res.message).to.eql(\"Requested item not found\");",
							"    });",
							"}",
							"",
							"// Nếu 405: kiểm tra message",
							"if (pm.response.code === 405) {",
							"    pm.test(\"Response message for 405\", function () {",
							"        const res = pm.response.json();",
							"        pm.expect(res.message).to.eql(\"Method is not allowed for the requested route\");",
							"    });",
							"}",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/products/search?q={{query}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products",
						"search"
					],
					"query": [
						{
							"key": "q",
							"value": "{{query}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET /messages/{messageId}",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Kiểm tra status code hợp lệ",
							"pm.test(\"Status code is valid\", function () {",
							"    pm.expect([200, 401, 404, 405]).to.include(pm.response.code);",
							"});",
							"",
							"// Nếu 200 → phải có thông tin message",
							"if (pm.response.code === 200) {",
							"    pm.test(\"Response has message info\", function () {",
							"        const res = pm.response.json();",
							"        pm.expect(res).to.have.property(\"id\");",
							"        pm.expect(res).to.have.property(\"subject\");",
							"        pm.expect(res).to.have.property(\"message\");",
							"        pm.expect(res).to.have.property(\"user_id\");",
							"    });",
							"}",
							"",
							"// Nếu 401 → Unauthorized",
							"if (pm.response.code === 401) {",
							"    pm.test(\"Unauthorized response\", function () {",
							"        const res = pm.response.json();",
							"        pm.expect(res.message).to.eql(\"Unauthorized\");",
							"    });",
							"}",
							"",
							"// Nếu 404 → Message not found",
							"if (pm.response.code === 404) {",
							"    pm.test(\"Message not found response\", function () {",
							"        const res = pm.response.json();",
							"        pm.expect(res.message).to.eql(\"Requested item not found\");",
							"    });",
							"}",
							"",
							"// Nếu 405 → Method not allowed",
							"if (pm.response.code === 405) {",
							"    pm.test(\"Method not allowed response\", function () {",
							"        const res = pm.response.json();",
							"        pm.expect(res.message).to.eql(\"Method is not allowed for the requested route\");",
							"    });",
							"}",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/messages/{{messageId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"messages",
						"{{messageId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET /users/{userId}",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Kiểm tra status code hợp lệ",
							"pm.test(\"Status code is valid\", function () {",
							"    pm.expect([200, 401, 404, 405]).to.include(pm.response.code);",
							"});",
							"",
							"// Nếu 200 → phải có thông tin user",
							"if (pm.response.code === 200) {",
							"    pm.test(\"Response has user info\", function () {",
							"        const res = pm.response.json();",
							"        pm.expect(res).to.have.property(\"id\");",
							"        pm.expect(res).to.have.property(\"name\");",
							"        pm.expect(res).to.have.property(\"email\");",
							"    });",
							"}",
							"",
							"// Nếu 401 → Unauthorized",
							"if (pm.response.code === 401) {",
							"    pm.test(\"Unauthorized response\", function () {",
							"        const res = pm.response.json();",
							"        pm.expect(res.message).to.eql(\"Unauthorized\");",
							"    });",
							"}",
							"",
							"// Nếu 404 → User not found",
							"if (pm.response.code === 404) {",
							"    pm.test(\"User not found response\", function () {",
							"        const res = pm.response.json();",
							"        pm.expect(res.message).to.eql(\"Requested item not found\");",
							"    });",
							"}",
							"",
							"// Nếu 405 → Method not allowed",
							"if (pm.response.code === 405) {",
							"    pm.test(\"Method not allowed response\", function () {",
							"        const res = pm.response.json();",
							"        pm.expect(res.message).to.eql(\"Method is not allowed for the requested route\");",
							"    });",
							"}",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/users/{{userId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{userId}}"
					]
				}
			},
			"response": []
		}
	]
}